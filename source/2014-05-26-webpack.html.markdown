---
title: Webpack in the Rails Asset Pipeline
subtitle: This snippet of code integrates Webpack into the Sprockets build process
date: 2014/05/26
category: ruby-on-rails
---

Rails applications have long had a unilateral asset compilation strategy
provided by Sprockets (as a part of [Ruby on Rails's Asset
Pipeline][assetpipeline]).  However, as the depth of JavaScript
[build][requirejs] [tools][grunt] increases, application authors can and should
take advantage of more diverse code structures than what Sprockets is designed
for to promote better long-term maintainability through the modularity of
components.

At Causes, we wanted to integrate the [Webpack module bundler][webpack] to
combine our CommonJS modules.

However, we also wanted to keep the Sprockets default
`config.assets.js_compressor = :uglify` as the last step in our build pipeline.

We ended up creating a prerequisite step in the asset precompilation process by
using a bit of Rake trickery. Perhaps you will find it useful:

~~~ ruby
# lib/tasks/assets.rake
# The webpack task must run before assets:environment task.
# Otherwise Sprockets cannot find the files that webpack produces.
Rake::Task['assets:precompile']
  .clear_prerequisites
  .enhance(['assets:compile_environment'])

namespace :assets do
  # In this task, set prerequisites for the assets:precompile task
  task :compile_environment => :webpack do
    Rake::Task['assets:environment'].invoke
  end

  desc 'Compile assets with webpack'
  task :webpack do
    sh '$(npm bin)/webpack --config webpack.config.js'
  end

  task :clobber do
    rm_rf "#{app.config.root}/app/assets/javascripts/{bundle.js,components.js}"
  end
end
~~~

[grunt]: https://github.com/gruntjs/grunt
[requirejs]: https://github.com/jrburke/requirejs
[assetpipeline]: http://guides.rubyonrails.org/asset_pipeline.html
[webpack]: https://github.com/webpack/webpack
